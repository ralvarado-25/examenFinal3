{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raula\\\\Downloads\\\\final\\\\react-hotel-reservation-system-main\\\\src\\\\containers\\\\Steps\\\\HotelDate\\\\HotelDate.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport validatorjs from 'validator';\nimport { useForm, useLocalStorage, useHotels } from 'hooks';\nimport { Portlet, Button, Select, TextField } from 'components';\nimport formClasses from 'components/Form/Form.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet afterTwoDays = new Date();\nafterTwoDays.setDate(afterTwoDays.getDate() + 1);\nafterTwoDays = afterTwoDays.toString();\nconst step = {\n  index: 0,\n  isValid: false,\n  inputs: {\n    hotel: {\n      value: '',\n      isTouched: false,\n      isValid: false\n    },\n    checkin: {\n      value: '',\n      isTouched: false,\n      isValid: false\n    },\n    checkout: {\n      value: '',\n      isTouched: false,\n      isValid: false\n    },\n    adults: {\n      value: '1',\n      isTouched: false,\n      isValid: false\n    },\n    children: {\n      value: '0',\n      isTouched: false,\n      isValid: false\n    }\n  }\n};\n\nconst HotelDate = props => {\n  _s();\n\n  const [storedValue, setLocalStorageValue] = useLocalStorage(`step-${step.index}`, step);\n  const [formState, inputHandler] = useForm(storedValue.inputs, storedValue.isValid);\n  const {\n    hotels\n  } = useHotels();\n  const [checkinValidators, setCheckinValidators] = useState([[validatorjs.isDate], [validatorjs.isAfter]]);\n  const [checkoutValidators, setCheckoutValidators] = useState([[validatorjs.isDate], [validatorjs.isAfter, afterTwoDays]]);\n  const activeHotelId = formState.inputs.hotel.value;\n  let selectedHotelDetails;\n\n  if (hotels) {\n    selectedHotelDetails = hotels.details.find(item => item.id === activeHotelId);\n  }\n\n  let maxAdultSize = 5;\n\n  if (selectedHotelDetails && typeof selectedHotelDetails.max_adult_size !== 'undefined') {\n    maxAdultSize = selectedHotelDetails.max_adult_size;\n  }\n\n  let isChildDisabled = false;\n\n  if (selectedHotelDetails && typeof selectedHotelDetails.child_status !== 'undefined') {\n    isChildDisabled = !selectedHotelDetails.child_status;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Portlet, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: formClasses['form__wide-row'],\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          id: \"hotel\",\n          label: \"Seleccione un hotel\",\n          options: hotels ? hotels.names.map(hotel => ({\n            label: hotel.hotel_name,\n            value: hotel.id\n          })) : [],\n          onChange: (id, value, validity) => {\n            inputHandler(id, value, validity); // Revalidate related fields\n\n            if (!isChildDisabled) {\n              inputHandler('children', '0', true);\n            }\n\n            inputHandler('adults', '1', true);\n          },\n          value: formState.inputs.hotel.value,\n          validity: formState.inputs.hotel.isValid,\n          isTouched: formState.inputs.hotel.isTouched,\n          validators: [[validatorjs.isLength, {\n            min: 1,\n            max: undefined\n          }]],\n          validationMessage: \"Please select a hotel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: formClasses['form__wide-row'],\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"checkin\",\n          type: \"date\",\n          label: \"Desde\",\n          value: formState.inputs.checkin.value,\n          validity: formState.inputs.checkin.isValid,\n          isTouched: formState.inputs.checkin.isTouched,\n          validators: checkinValidators,\n          validationMessage: \"Please select a valid check-in date.\",\n          onChange: (id, value, validity) => {\n            inputHandler(id, value, validity);\n            setCheckoutValidators([[validatorjs.isDate], [validatorjs.isAfter, value]]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"checkout\",\n          type: \"date\",\n          label: \"Hacia\",\n          value: formState.inputs.checkout.value,\n          validity: formState.inputs.checkout.isValid,\n          isTouched: formState.inputs.checkout.isTouched,\n          validators: checkoutValidators,\n          validationMessage: \"Please select a valid check-out date.\",\n          onChange: (id, value, validity) => {\n            inputHandler(id, value, validity);\n            setCheckinValidators([[validatorjs.isDate], [validatorjs.isAfter], [validatorjs.isBefore, value]]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"adults\",\n          type: \"number\",\n          label: \"Adultos\",\n          value: formState.inputs.adults.value,\n          validity: formState.inputs.adults.isValid,\n          isTouched: formState.inputs.adults.isTouched,\n          validators: [[validatorjs.isInt, {\n            min: 1,\n            max: maxAdultSize\n          }]],\n          validationMessage: `Please enter a valid number between 1 and ${maxAdultSize}.`,\n          onChange: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"children\",\n          type: \"number\",\n          label: \"Children\",\n          value: formState.inputs.children.value,\n          validity: formState.inputs.children.isValid,\n          isTouched: formState.inputs.children.isTouched,\n          validators: [[validatorjs.isInt, {\n            min: 0,\n            max: 5\n          }]],\n          validationMessage: \"Please enter a valid number between 0 and 5.\",\n          onChange: inputHandler,\n          disabled: isChildDisabled,\n          disabledMessage: \"No se permite ni\\xF1os\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: [formClasses['form__normal-row'], formClasses['form__actions']].join(' '),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          onClick: () => {\n            if (!formState.isValid) return;\n            props.stepChangeHandler(step.index, formState, step.index + 1);\n            setLocalStorageValue({ ...step,\n              isValid: formState.isValid,\n              inputs: { ...formState.inputs\n              }\n            });\n          },\n          disabled: !formState.isValid,\n          children: \"Save and continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HotelDate, \"8TLdWDBmtTfTGroqm06YbBtbBJw=\", false, function () {\n  return [useLocalStorage, useForm, useHotels];\n});\n\n_c = HotelDate;\nexport default HotelDate;\n\nvar _c;\n\n$RefreshReg$(_c, \"HotelDate\");","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/containers/Steps/HotelDate/HotelDate.tsx"],"names":["React","useState","validatorjs","useForm","useLocalStorage","useHotels","Portlet","Button","Select","TextField","formClasses","afterTwoDays","Date","setDate","getDate","toString","step","index","isValid","inputs","hotel","value","isTouched","checkin","checkout","adults","children","HotelDate","props","storedValue","setLocalStorageValue","formState","inputHandler","hotels","checkinValidators","setCheckinValidators","isDate","isAfter","checkoutValidators","setCheckoutValidators","activeHotelId","selectedHotelDetails","details","find","item","id","maxAdultSize","max_adult_size","isChildDisabled","child_status","e","preventDefault","names","map","label","hotel_name","validity","isLength","min","max","undefined","isBefore","isInt","join","stepChangeHandler"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport validatorjs from 'validator';\n\nimport { useForm, useLocalStorage, useHotels } from 'hooks';\nimport { Portlet, Button, Select, TextField } from 'components';\n\nimport formClasses from 'components/Form/Form.module.scss';\n\nlet afterTwoDays: string | Date = new Date();\nafterTwoDays.setDate(afterTwoDays.getDate() + 1);\nafterTwoDays = afterTwoDays.toString();\n\nconst step: TypeStep = {\n    index: 0,\n    isValid: false,\n    inputs: {\n        hotel: {\n            value: '',\n            isTouched: false,\n            isValid: false\n        },\n        checkin: {\n            value: '',\n            isTouched: false,\n            isValid: false\n        },\n        checkout: {\n            value: '',\n            isTouched: false,\n            isValid: false\n        },\n        adults: {\n            value: '1',\n            isTouched: false,\n            isValid: false\n        },\n        children: {\n            value: '0',\n            isTouched: false,\n            isValid: false\n        }\n    }\n};\n\nconst HotelDate: React.FC<TypeReservationStep> = (props: TypeReservationStep) => {\n    const [storedValue, setLocalStorageValue] = useLocalStorage(`step-${step.index}`, step);\n    const [formState, inputHandler] = useForm(storedValue.inputs, storedValue.isValid);\n    const { hotels } = useHotels();\n\n    const [checkinValidators, setCheckinValidators] = useState<TypeValidator[]>([\n        [validatorjs.isDate],\n        [validatorjs.isAfter]\n    ]);\n    const [checkoutValidators, setCheckoutValidators] = useState<TypeValidator[]>([\n        [validatorjs.isDate],\n        [validatorjs.isAfter, afterTwoDays]\n    ]);\n\n    const activeHotelId = formState.inputs.hotel.value;\n    let selectedHotelDetails: TypeHotelDetails | undefined;\n    if (hotels) {\n        selectedHotelDetails = hotels.details.find((item: TypeHotelDetails) => item.id === activeHotelId);\n    }\n\n    let maxAdultSize = 5;\n    if (selectedHotelDetails && typeof selectedHotelDetails.max_adult_size !== 'undefined') {\n        maxAdultSize = selectedHotelDetails.max_adult_size;\n    }\n\n    let isChildDisabled = false;\n    if (selectedHotelDetails && typeof selectedHotelDetails.child_status !== 'undefined') {\n        isChildDisabled = !selectedHotelDetails.child_status;\n    }\n\n    return (\n        <Portlet>\n            <form onSubmit={(e) => e.preventDefault()}>\n                <div className={formClasses['form__wide-row']}>\n                    <Select\n                        id=\"hotel\"\n                        label=\"Seleccione un hotel\"\n                        options={\n                            hotels ? hotels.names.map((hotel) => ({ label: hotel.hotel_name, value: hotel.id })) : []\n                        }\n                        onChange={(id: string, value: any, validity: boolean) => {\n                            inputHandler(id, value, validity);\n                            // Revalidate related fields\n                            if (!isChildDisabled) {\n                                inputHandler('children', '0', true);\n                            }\n                            inputHandler('adults', '1', true);\n                        }}\n                        value={formState.inputs.hotel.value}\n                        validity={formState.inputs.hotel.isValid}\n                        isTouched={formState.inputs.hotel.isTouched}\n                        validators={[[validatorjs.isLength, { min: 1, max: undefined }]]}\n                        validationMessage=\"Please select a hotel\"\n                    />\n                </div>\n                <div className={formClasses['form__wide-row']}>\n                    <TextField\n                        id=\"checkin\"\n                        type=\"date\"\n                        label=\"Desde\"\n                        value={formState.inputs.checkin.value}\n                        validity={formState.inputs.checkin.isValid}\n                        isTouched={formState.inputs.checkin.isTouched}\n                        validators={checkinValidators}\n                        validationMessage=\"Please select a valid check-in date.\"\n                        onChange={(id, value, validity) => {\n                            inputHandler(id, value, validity);\n                            setCheckoutValidators([[validatorjs.isDate], [validatorjs.isAfter, value]]);\n                        }}\n                    />\n                    <TextField\n                        id=\"checkout\"\n                        type=\"date\"\n                        label=\"Hacia\"\n                        value={formState.inputs.checkout.value}\n                        validity={formState.inputs.checkout.isValid}\n                        isTouched={formState.inputs.checkout.isTouched}\n                        validators={checkoutValidators}\n                        validationMessage=\"Please select a valid check-out date.\"\n                        onChange={(id, value, validity) => {\n                            inputHandler(id, value, validity);\n                            setCheckinValidators([\n                                [validatorjs.isDate],\n                                [validatorjs.isAfter],\n                                [validatorjs.isBefore, value]\n                            ]);\n                        }}\n                    />\n                    <TextField\n                        id=\"adults\"\n                        type=\"number\"\n                        label=\"Adultos\"\n                        value={formState.inputs.adults.value}\n                        validity={formState.inputs.adults.isValid}\n                        isTouched={formState.inputs.adults.isTouched}\n                        validators={[[validatorjs.isInt, { min: 1, max: maxAdultSize }]]}\n                        validationMessage={`Please enter a valid number between 1 and ${maxAdultSize}.`}\n                        onChange={inputHandler}\n                    />\n                    <TextField\n                        id=\"children\"\n                        type=\"number\"\n                        label=\"Children\"\n                        value={formState.inputs.children.value}\n                        validity={formState.inputs.children.isValid}\n                        isTouched={formState.inputs.children.isTouched}\n                        validators={[[validatorjs.isInt, { min: 0, max: 5 }]]}\n                        validationMessage=\"Please enter a valid number between 0 and 5.\"\n                        onChange={inputHandler}\n                        disabled={isChildDisabled}\n                        disabledMessage=\"No se permite niños\"\n                    />\n                </div>\n                <div className={[formClasses['form__normal-row'], formClasses['form__actions']].join(' ')}>\n                    <Button\n                        type=\"button\"\n                        onClick={() => {\n                            if (!formState.isValid) return;\n                            props.stepChangeHandler(step.index, formState, step.index + 1);\n                            setLocalStorageValue({\n                                ...step,\n                                isValid: formState.isValid,\n                                inputs: { ...formState.inputs }\n                            });\n                        }}\n                        disabled={!formState.isValid}\n                    >\n                        Save and continue\n                    </Button>\n                </div>\n            </form>\n        </Portlet>\n    );\n};\n\nexport default HotelDate;\n"]},"metadata":{},"sourceType":"module"}
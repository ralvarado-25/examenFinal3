{"ast":null,"code":"import { logger, getStoredValue, getTwoDatesDiff } from 'lib/scripts/utils';\nimport { UPDATE_CART, CHECK_COUPON, APPLY_COUPON, CHECK_COUPON_FAILED, NEW_RESERVATION, NEW_RESERVATION_FINISH, NEW_RESERVATION_FAILED, DELETE_RESERVATION, DELETE_RESERVATION_FINISH, DELETE_RESERVATION_FAILED } from './constants';\n\n// Get initial state from saved values\nconst getCartInitialState = () => {\n  const step0 = getStoredValue('step-0');\n  const step1 = getStoredValue('step-1');\n  const reservationId = getStoredValue('reservationId');\n  return {\n    hotelId: step0 ? step0.inputs.hotel.value : '',\n    checkin: step0 ? step0.inputs.checkin.value : '',\n    checkout: step0 ? step0.inputs.checkout.value : '',\n    days: step0 ? getTwoDatesDiff(step0.inputs.checkin.value, step0.inputs.checkout.value) : 0,\n    adults: step0 ? step0.inputs.adults.value : '',\n    children: step0 ? step0.inputs.children.value : '',\n    roomType: step1 ? step1.inputs.roomType.value : '',\n    viewType: step1 ? step1.inputs.viewType.value : '',\n    coupon: {\n      data: {},\n      status: 'idle',\n      error: ''\n    },\n    newReservation: {\n      data: {\n        id: reservationId ? +reservationId : 0\n      },\n      status: 'idle',\n      error: ''\n    }\n  };\n};\n\nconst cartReducer = (state = getCartInitialState(), action) => {\n  logger.debug('[reducer]', 'cartReducer', action);\n\n  switch (action.type) {\n    case UPDATE_CART:\n      // Check if we have inputs, if not, start fresh, but keep the newReservation ID\n      if (!Object.keys(action.data).length) {\n        return getCartInitialState();\n      }\n\n      return { ...state,\n        ...action.data\n      };\n\n    case CHECK_COUPON:\n      return { ...state,\n        coupon: {\n          data: {},\n          status: 'pending',\n          error: ''\n        }\n      };\n\n    case APPLY_COUPON:\n      return { ...state,\n        coupon: { ...action.data\n        }\n      };\n\n    case CHECK_COUPON_FAILED:\n      return { ...state,\n        coupon: {\n          data: {},\n          status: 'rejected',\n          error: action.error ? action.error : 'Something went wrong.'\n        }\n      };\n\n    case NEW_RESERVATION:\n      return { ...state,\n        newReservation: {\n          data: {},\n          status: 'pending',\n          error: ''\n        }\n      };\n\n    case NEW_RESERVATION_FINISH:\n      return { ...state,\n        newReservation: { ...action.data\n        }\n      };\n\n    case NEW_RESERVATION_FAILED:\n      return { ...state,\n        newReservation: {\n          data: {},\n          status: 'rejected',\n          error: action.error ? action.error : 'Something went wrong.'\n        }\n      };\n\n    case DELETE_RESERVATION:\n      return { ...state,\n        newReservation: {\n          data: {},\n          status: 'pending',\n          error: ''\n        }\n      };\n\n    case DELETE_RESERVATION_FINISH:\n      return getCartInitialState();\n\n    case DELETE_RESERVATION_FAILED:\n      return { ...state,\n        newReservation: {\n          data: {},\n          status: 'rejected',\n          error: action.error ? action.error : 'Something went wrong.'\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/stores/cart/reducers.ts"],"names":["logger","getStoredValue","getTwoDatesDiff","UPDATE_CART","CHECK_COUPON","APPLY_COUPON","CHECK_COUPON_FAILED","NEW_RESERVATION","NEW_RESERVATION_FINISH","NEW_RESERVATION_FAILED","DELETE_RESERVATION","DELETE_RESERVATION_FINISH","DELETE_RESERVATION_FAILED","getCartInitialState","step0","step1","reservationId","hotelId","inputs","hotel","value","checkin","checkout","days","adults","children","roomType","viewType","coupon","data","status","error","newReservation","id","cartReducer","state","action","debug","type","Object","keys","length"],"mappings":"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","sourcesContent":["import { logger, getStoredValue, getTwoDatesDiff } from 'lib/scripts/utils';\nimport {\n    UPDATE_CART,\n    CHECK_COUPON,\n    APPLY_COUPON,\n    CHECK_COUPON_FAILED,\n    NEW_RESERVATION,\n    NEW_RESERVATION_FINISH,\n    NEW_RESERVATION_FAILED,\n    DELETE_RESERVATION,\n    DELETE_RESERVATION_FINISH,\n    DELETE_RESERVATION_FAILED\n} from './constants';\n\ntype TypeCartReducerAction = {\n    type: string;\n    data: TypeCartDetails['cart'];\n    error?: string;\n};\n\ntype TypeCartInitialState = {\n    hotelId: string;\n    checkin: string;\n    checkout: string;\n    days: number;\n    adults: string;\n    children: string;\n    roomType: string;\n    viewType: string;\n    coupon: {\n        data: TypeCoupon;\n        status: string;\n        error: string;\n    };\n    newReservation: {\n        data: TypeNewReservation;\n        status: string;\n        error: string;\n    };\n};\n\n// Get initial state from saved values\nconst getCartInitialState = (): TypeCartInitialState => {\n    const step0 = getStoredValue<TypeStep>('step-0');\n    const step1 = getStoredValue<TypeStep>('step-1');\n    const reservationId = getStoredValue<string>('reservationId');\n\n    return {\n        hotelId: step0 ? step0.inputs.hotel.value : '',\n        checkin: step0 ? step0.inputs.checkin.value : '',\n        checkout: step0 ? step0.inputs.checkout.value : '',\n        days: step0 ? getTwoDatesDiff(step0.inputs.checkin.value, step0.inputs.checkout.value) : 0,\n        adults: step0 ? step0.inputs.adults.value : '',\n        children: step0 ? step0.inputs.children.value : '',\n        roomType: step1 ? step1.inputs.roomType.value : '',\n        viewType: step1 ? step1.inputs.viewType.value : '',\n        coupon: {\n            data: {},\n            status: 'idle',\n            error: ''\n        },\n        newReservation: {\n            data: {\n                id: reservationId ? +reservationId : 0\n            },\n            status: 'idle',\n            error: ''\n        }\n    };\n};\n\nconst cartReducer = (state: TypeCartInitialState = getCartInitialState(), action: TypeCartReducerAction) => {\n    logger.debug('[reducer]', 'cartReducer', action);\n\n    switch (action.type) {\n        case UPDATE_CART:\n            // Check if we have inputs, if not, start fresh, but keep the newReservation ID\n            if (!Object.keys(action.data).length) {\n                return getCartInitialState();\n            }\n\n            return {\n                ...state,\n                ...action.data\n            };\n\n        case CHECK_COUPON:\n            return {\n                ...state,\n                coupon: {\n                    data: {},\n                    status: 'pending',\n                    error: ''\n                }\n            };\n\n        case APPLY_COUPON:\n            return {\n                ...state,\n                coupon: { ...action.data }\n            };\n\n        case CHECK_COUPON_FAILED:\n            return {\n                ...state,\n                coupon: {\n                    data: {},\n                    status: 'rejected',\n                    error: action.error ? action.error : 'Something went wrong.'\n                }\n            };\n\n        case NEW_RESERVATION:\n            return {\n                ...state,\n                newReservation: {\n                    data: {},\n                    status: 'pending',\n                    error: ''\n                }\n            };\n\n        case NEW_RESERVATION_FINISH:\n            return {\n                ...state,\n                newReservation: { ...action.data }\n            };\n\n        case NEW_RESERVATION_FAILED:\n            return {\n                ...state,\n                newReservation: {\n                    data: {},\n                    status: 'rejected',\n                    error: action.error ? action.error : 'Something went wrong.'\n                }\n            };\n\n        case DELETE_RESERVATION:\n            return {\n                ...state,\n                newReservation: {\n                    data: {},\n                    status: 'pending',\n                    error: ''\n                }\n            };\n\n        case DELETE_RESERVATION_FINISH:\n            return getCartInitialState();\n\n        case DELETE_RESERVATION_FAILED:\n            return {\n                ...state,\n                newReservation: {\n                    data: {},\n                    status: 'rejected',\n                    error: action.error ? action.error : 'Something went wrong.'\n                }\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default cartReducer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raula\\\\Downloads\\\\final\\\\react-hotel-reservation-system-main\\\\src\\\\components\\\\Form\\\\Select\\\\Select.tsx\";\nimport React, { memo } from 'react';\nimport ReactSelect from 'react-select';\nimport _ from 'lodash';\nimport { validator, logger } from 'lib/scripts/utils';\nimport './Select.scss';\nimport formClasses from '../Form.module.scss';\n/**\n * Create option from a value\n *\n * @param {string} value\n * @param {object[]} secondObj\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst createOption = (value, options) => {\n  if (!Array.isArray(options)) {\n    return null;\n  } // One value selection\n  // Some values are 0 thats why we are checking the falsy ones\n\n\n  if (!Array.isArray(value) && (value || value === 0)) {\n    const valueObj = options.reduce((obj, option) => option.value === value ? option : obj, {});\n    return valueObj;\n  }\n\n  if (Array.isArray(value) && value.length > 0) {\n    // isMulti\n    // Find selected default value's index\n    const valuesObj = value.map(value => {\n      const valueObj = options.reduce((obj, option) => option.value === value ? option : obj, {});\n      return valueObj;\n    });\n    return valuesObj;\n  }\n\n  return null;\n};\n\n// @bug react-select is preventing submit on pressing enter, which is a bug in react-select (https://github.com/JedWatson/react-select/issues/2798)\nconst Select = ({\n  options,\n  id,\n  label,\n  onChange,\n  value,\n  validity,\n  validators,\n  isTouched,\n  validationMessage,\n  ...rest\n}) => {\n  logger.debug('[Select.ts]', id);\n\n  const handleChange = valueObj => {\n    let value = null;\n\n    if (valueObj !== null) {\n      value = Array.isArray(valueObj) ? valueObj.map(value => value.value) : valueObj.value;\n    }\n\n    const isValid = validator(value, validators);\n    onChange(id, value, isValid);\n  };\n\n  const wrapperClasses = ['select'];\n  if (validity === false && isTouched) wrapperClasses.push('select--invalid');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: wrapperClasses.join(' '),\n    children: [label && /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      className: formClasses['form__label'],\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ReactSelect, {\n      options: options,\n      inputId: id,\n      instanceId: id,\n      name: id,\n      classNamePrefix: \"select\",\n      onChange: handleChange,\n      value: createOption(value, options),\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: formClasses['form__info'],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: formClasses['form__info__content'],\n        children: validity === false && isTouched && !!validationMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: formClasses['form__info__invalid-text'],\n          children: validationMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n/**\n * Prevent re-rendering all the inputs when one of them changes!\n * Because the form hook is producing a new state immutably,\n * so the prevProps and nextProps cannot be equal even if they haven't changed!!\n */\n\n\n_c = Select;\n\nfunction areEqual(prevProps, nextProps) {\n  // const compareKeys = ['options', 'value', 'validity', 'validators', 'isTouched'];\n  const areEqual = _.isEqual(prevProps, nextProps);\n\n  return areEqual;\n}\n\nexport default _c2 = /*#__PURE__*/memo(Select, areEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Select\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/components/Form/Select/Select.tsx"],"names":["React","memo","ReactSelect","_","validator","logger","formClasses","createOption","value","options","Array","isArray","valueObj","reduce","obj","option","length","valuesObj","map","Select","id","label","onChange","validity","validators","isTouched","validationMessage","rest","debug","handleChange","isValid","wrapperClasses","push","join","areEqual","prevProps","nextProps","isEqual"],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport ReactSelect from 'react-select';\nimport _ from 'lodash';\n\nimport { validator, logger } from 'lib/scripts/utils';\n\nimport './Select.scss';\nimport formClasses from '../Form.module.scss';\n\n/**\n * Create option from a value\n *\n * @param {string} value\n * @param {object[]} secondObj\n */\nconst createOption = (value: any, options: any) => {\n    if (!Array.isArray(options)) {\n        return null;\n    }\n\n    // One value selection\n    // Some values are 0 thats why we are checking the falsy ones\n    if (!Array.isArray(value) && (value || value === 0)) {\n        const valueObj = options.reduce((obj, option) => (option.value === value ? option : obj), {});\n        return valueObj;\n    }\n\n    if (Array.isArray(value) && value.length > 0) {\n        // isMulti\n        // Find selected default value's index\n        const valuesObj = value.map((value) => {\n            const valueObj = options.reduce((obj, option) => (option.value === value ? option : obj), {});\n            return valueObj;\n        });\n        return valuesObj;\n    }\n\n    return null;\n};\n\ndeclare global {\n    type TypeOption = {\n        label: string;\n        value: string;\n    };\n}\n\ntype TypeSelectProps = {\n    options?: TypeOption[];\n    id: string;\n    label?: string;\n    onChange: TypeInputOnChange;\n    value?: string | number | [];\n    validity: boolean;\n    validators?: TypeValidator[];\n    isTouched?: boolean;\n    validationMessage?: string;\n};\n\n// @bug react-select is preventing submit on pressing enter, which is a bug in react-select (https://github.com/JedWatson/react-select/issues/2798)\nconst Select: React.FC<TypeSelectProps> = ({\n    options,\n    id,\n    label,\n    onChange,\n    value,\n    validity,\n    validators,\n    isTouched,\n    validationMessage,\n    ...rest\n}: TypeSelectProps) => {\n    logger.debug('[Select.ts]', id);\n\n    const handleChange = (valueObj: { value: any }) => {\n        let value = null;\n\n        if (valueObj !== null) {\n            value = Array.isArray(valueObj) ? valueObj.map((value) => value.value) : valueObj.value;\n        }\n\n        const isValid = validator(value, validators);\n        onChange(id, value, isValid);\n    };\n\n    const wrapperClasses = ['select'];\n    if (validity === false && isTouched) wrapperClasses.push('select--invalid');\n\n    return (\n        <div className={wrapperClasses.join(' ')}>\n            {label && (\n                <label htmlFor={id} className={formClasses['form__label']}>\n                    {label}\n                </label>\n            )}\n            <ReactSelect\n                options={options}\n                inputId={id}\n                instanceId={id}\n                name={id}\n                classNamePrefix=\"select\"\n                onChange={handleChange}\n                value={createOption(value, options)}\n                {...rest}\n            />\n            <div className={formClasses['form__info']}>\n                <div className={formClasses['form__info__content']}>\n                    {validity === false && isTouched && !!validationMessage && (\n                        <p className={formClasses['form__info__invalid-text']}>{validationMessage}</p>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\n/**\n * Prevent re-rendering all the inputs when one of them changes!\n * Because the form hook is producing a new state immutably,\n * so the prevProps and nextProps cannot be equal even if they haven't changed!!\n */\nfunction areEqual(prevProps: TypeSelectProps, nextProps: TypeSelectProps) {\n    // const compareKeys = ['options', 'value', 'validity', 'validators', 'isTouched'];\n    const areEqual = _.isEqual(prevProps, nextProps);\n    return areEqual;\n}\n\nexport default memo(Select, areEqual);\n"]},"metadata":{},"sourceType":"module"}
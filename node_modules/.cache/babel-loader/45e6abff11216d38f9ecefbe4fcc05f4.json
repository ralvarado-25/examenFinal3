{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateCart } from 'stores/cart/actions';\nimport useLocalStorage from './useLocalStorage';\nconst initialState = {\n  steps: {\n    0: {\n      isValid: false,\n      status: 'completed'\n    },\n    1: {\n      isValid: false,\n      status: 'uncompleted'\n    },\n    2: {\n      isValid: false,\n      status: 'uncompleted'\n    }\n  },\n  currentStep: 0\n};\n\nconst useReservation = () => {\n  _s();\n\n  const [storedValue, setLocalStorageValue] = useLocalStorage('steps', initialState);\n  const [stepsState, setStepsState] = useState(storedValue);\n  const dispatch = useDispatch();\n  const updateStepsState = useCallback(newState => {\n    setStepsState(newState);\n    setLocalStorageValue(newState);\n  }, [setLocalStorageValue]);\n  const stepChangeHandler = useCallback((stepIndex, formState, targetStep) => {\n    const isReset = !formState.isValid && !Object.keys(formState.inputs).length;\n    let newState = initialState;\n\n    if (!isReset) {\n      newState = {\n        steps: { ...stepsState.steps,\n          [stepIndex]: {\n            isValid: formState.isValid,\n            status: 'completed'\n          }\n        },\n        currentStep: targetStep\n      };\n    }\n\n    updateStepsState(newState);\n    dispatch(updateCart(formState.inputs));\n  }, [dispatch, stepsState.steps, updateStepsState]);\n  return {\n    stepsState,\n    stepChangeHandler\n  };\n};\n\n_s(useReservation, \"4hRApK6MMKGPGlWDdJ51bji7r7I=\", false, function () {\n  return [useLocalStorage, useDispatch];\n});\n\nexport default useReservation;","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/hooks/useSteps.ts"],"names":["useState","useCallback","useDispatch","updateCart","useLocalStorage","initialState","steps","isValid","status","currentStep","useReservation","storedValue","setLocalStorageValue","stepsState","setStepsState","dispatch","updateStepsState","newState","stepChangeHandler","stepIndex","formState","targetStep","isReset","Object","keys","inputs","length"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAcA,MAAMC,YAA4B,GAAG;AACjCC,EAAAA,KAAK,EAAE;AACH,OAAG;AACCC,MAAAA,OAAO,EAAE,KADV;AAECC,MAAAA,MAAM,EAAE;AAFT,KADA;AAKH,OAAG;AACCD,MAAAA,OAAO,EAAE,KADV;AAECC,MAAAA,MAAM,EAAE;AAFT,KALA;AASH,OAAG;AACCD,MAAAA,OAAO,EAAE,KADV;AAECC,MAAAA,MAAM,EAAE;AAFT;AATA,GAD0B;AAejCC,EAAAA,WAAW,EAAE;AAfoB,CAArC;;AAkBA,MAAMC,cAAc,GAAG,MAGlB;AAAA;;AACD,QAAM,CAACC,WAAD,EAAcC,oBAAd,IAAsCR,eAAe,CAAC,OAAD,EAAUC,YAAV,CAA3D;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAiBW,WAAjB,CAA5C;AACA,QAAMI,QAAQ,GAAGb,WAAW,EAA5B;AAEA,QAAMc,gBAAgB,GAAGf,WAAW,CAC/BgB,QAAD,IAAc;AACVH,IAAAA,aAAa,CAACG,QAAD,CAAb;AACAL,IAAAA,oBAAoB,CAACK,QAAD,CAApB;AACH,GAJ+B,EAKhC,CAACL,oBAAD,CALgC,CAApC;AAQA,QAAMM,iBAAiB,GAAGjB,WAAW,CACjC,CAACkB,SAAD,EAAoBC,SAApB,EAA8CC,UAA9C,KAAqE;AACjE,UAAMC,OAAO,GAAG,CAACF,SAAS,CAACb,OAAX,IAAsB,CAACgB,MAAM,CAACC,IAAP,CAAYJ,SAAS,CAACK,MAAtB,EAA8BC,MAArE;AACA,QAAIT,QAAQ,GAAGZ,YAAf;;AAEA,QAAI,CAACiB,OAAL,EAAc;AACVL,MAAAA,QAAQ,GAAG;AACPX,QAAAA,KAAK,EAAE,EACH,GAAGO,UAAU,CAACP,KADX;AAEH,WAACa,SAAD,GAAa;AACTZ,YAAAA,OAAO,EAAEa,SAAS,CAACb,OADV;AAETC,YAAAA,MAAM,EAAE;AAFC;AAFV,SADA;AAQPC,QAAAA,WAAW,EAAEY;AARN,OAAX;AAUH;;AAEDL,IAAAA,gBAAgB,CAACC,QAAD,CAAhB;AAEAF,IAAAA,QAAQ,CAACZ,UAAU,CAACiB,SAAS,CAACK,MAAX,CAAX,CAAR;AACH,GArBgC,EAsBjC,CAACV,QAAD,EAAWF,UAAU,CAACP,KAAtB,EAA6BU,gBAA7B,CAtBiC,CAArC;AAyBA,SAAO;AACHH,IAAAA,UADG;AAEHK,IAAAA;AAFG,GAAP;AAIH,CA7CD;;GAAMR,c;UAI0CN,e,EAE3BF,W;;;AAyCrB,eAAeQ,cAAf","sourcesContent":["import { useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { updateCart } from 'stores/cart/actions';\nimport useLocalStorage from './useLocalStorage';\n\ndeclare global {\n    type TypeStepsState = {\n        steps: {\n            [stepIndex: string]: {\n                isValid: boolean;\n                status: 'completed' | 'uncompleted';\n            };\n        };\n        currentStep: number;\n    };\n}\n\nconst initialState: TypeStepsState = {\n    steps: {\n        0: {\n            isValid: false,\n            status: 'completed'\n        },\n        1: {\n            isValid: false,\n            status: 'uncompleted'\n        },\n        2: {\n            isValid: false,\n            status: 'uncompleted'\n        }\n    },\n    currentStep: 0\n};\n\nconst useReservation = (): {\n    stepsState: TypeStepsState;\n    stepChangeHandler: (stepIndex: number, formState: TypeFormState, targetStep: number) => void;\n} => {\n    const [storedValue, setLocalStorageValue] = useLocalStorage('steps', initialState);\n    const [stepsState, setStepsState] = useState<TypeStepsState>(storedValue);\n    const dispatch = useDispatch();\n\n    const updateStepsState = useCallback(\n        (newState) => {\n            setStepsState(newState);\n            setLocalStorageValue(newState);\n        },\n        [setLocalStorageValue]\n    );\n\n    const stepChangeHandler = useCallback(\n        (stepIndex: number, formState: TypeFormState, targetStep: number) => {\n            const isReset = !formState.isValid && !Object.keys(formState.inputs).length;\n            let newState = initialState;\n\n            if (!isReset) {\n                newState = {\n                    steps: {\n                        ...stepsState.steps,\n                        [stepIndex]: {\n                            isValid: formState.isValid,\n                            status: 'completed'\n                        }\n                    },\n                    currentStep: targetStep\n                };\n            }\n\n            updateStepsState(newState);\n\n            dispatch(updateCart(formState.inputs));\n        },\n        [dispatch, stepsState.steps, updateStepsState]\n    );\n\n    return {\n        stepsState,\n        stepChangeHandler\n    };\n};\n\nexport default useReservation;\n"]},"metadata":{},"sourceType":"module"}
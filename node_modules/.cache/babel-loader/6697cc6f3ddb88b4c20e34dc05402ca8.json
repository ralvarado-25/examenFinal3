{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  _s();\n\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log('ðŸ”¥', error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setLocalStorageValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log('ðŸ”¥', error);\n    }\n  };\n\n  return [storedValue, setLocalStorageValue];\n};\n\n_s(useLocalStorage, \"Q1rqkfa1Z2w2qHjWnHugbwhUQ+A=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/hooks/useLocalStorage.ts"],"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setLocalStorageValue","value","valueToStore","Function","setItem","stringify"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,eAAe,GAAG,CAAIC,GAAJ,EAAiBC,YAAjB,KAA0D;AAAA;;AAC9E;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAI,MAAM;AACpD,QAAI;AACA,YAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb;AACA,aAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;AACH,KAHD,CAGE,OAAOS,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,KAAlB;AACA,aAAOT,YAAP;AACH;AACJ,GAR6C,CAA9C,CAF8E,CAY9E;AACA;;AACA,QAAMY,oBAAoB,GAAIC,KAAD,IAAc;AACvC,QAAI;AACA;AACA,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACZ,WAAD,CAAjC,GAAiDY,KAAtE;AACAX,MAAAA,cAAc,CAACY,YAAD,CAAd;AACAV,MAAAA,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4BjB,GAA5B,EAAiCQ,IAAI,CAACU,SAAL,CAAeH,YAAf,CAAjC;AACH,KALD,CAKE,OAAOL,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,KAAlB;AACH;AACJ,GATD;;AAWA,SAAO,CAACR,WAAD,EAAcW,oBAAd,CAAP;AACH,CA1BD;;GAAMd,e;;AA4BN,eAAeA,eAAf","sourcesContent":["import { useState } from 'react';\n\nconst useLocalStorage = <T>(key: string, initialValue: T): [T, (s: T) => void] => {\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState<T>(() => {\n        try {\n            const item = window.localStorage.getItem(key);\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            console.log('ðŸ”¥', error);\n            return initialValue;\n        }\n    });\n\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setLocalStorageValue = (value: T) => {\n        try {\n            // Allow value to be a function so we have same API as useState\n            const valueToStore = value instanceof Function ? value(storedValue) : value;\n            setStoredValue(valueToStore);\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        } catch (error) {\n            console.log('ðŸ”¥', error);\n        }\n    };\n\n    return [storedValue, setLocalStorageValue];\n};\n\nexport default useLocalStorage;\n"]},"metadata":{},"sourceType":"module"}
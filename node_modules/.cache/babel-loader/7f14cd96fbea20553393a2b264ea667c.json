{"ast":null,"code":"import { logger, getTwoDatesDiff, getRoomDetails, getStoredValue, clearStoredValues, getTotals } from 'lib/scripts/utils';\nimport { UPDATE_CART, CHECK_COUPON, APPLY_COUPON, CHECK_COUPON_FAILED, NEW_RESERVATION, NEW_RESERVATION_FINISH, NEW_RESERVATION_FAILED, DELETE_RESERVATION, DELETE_RESERVATION_FINISH, DELETE_RESERVATION_FAILED } from './constants';\n\nconst transformInputs = inputs => {\n  const inputsKeys = Object.keys(inputs);\n  const inputsLen = inputsKeys.length;\n  const newInputs = {};\n  if (!inputsLen) return {};\n\n  for (let i = 0; i < inputsLen; i += 1) {\n    const key = inputsKeys[i];\n    const value = inputs[key].value;\n    newInputs[key] = value;\n  }\n\n  return newInputs;\n};\n\nexport const updateCart = inputs => {\n  logger.debug('[actions]', 'updateCart', inputs);\n  const transformedInputs = transformInputs(inputs);\n\n  if (typeof transformedInputs.checkin !== 'undefined' && typeof transformedInputs.checkout !== 'undefined') {\n    transformedInputs['days'] = getTwoDatesDiff(transformedInputs.checkin, transformedInputs.checkout);\n  }\n\n  if (typeof transformedInputs.hotel !== 'undefined') {\n    transformedInputs['hotelId'] = transformedInputs.hotel;\n    delete transformedInputs.hotel;\n  }\n\n  return {\n    type: UPDATE_CART,\n    data: transformedInputs\n  };\n};\nexport const checkCoupon = couponCode => {\n  logger.debug('[actions]', 'checkCoupon', couponCode);\n  return {\n    type: CHECK_COUPON,\n    couponCode\n  };\n};\nexport const applyCoupon = coupon => {\n  logger.debug('[actions]', 'applyCoupon', coupon);\n  const data = {\n    data: { ...coupon\n    },\n    status: 'resolved',\n    error: ''\n  };\n  return {\n    type: APPLY_COUPON,\n    data\n  };\n};\nexport const applyCouponFailed = error => {\n  logger.debug('[actions]', 'applyCouponFailed');\n  return {\n    type: CHECK_COUPON_FAILED,\n    error\n  };\n};\nexport const newReservation = (cart, hotelsDetails, inputs) => {\n  logger.debug('[actions]', 'newReservation', cart);\n  const roomDetails = getRoomDetails(cart, hotelsDetails);\n  const totals = getTotals(cart, hotelsDetails);\n  const data = {\n    hotel_id: cart.hotelId ? +cart.hotelId : 0,\n    start_date: cart.checkin ? cart.checkin : '',\n    end_date: cart.checkout ? cart.checkout : '',\n    adult: cart.adults ? +cart.adults : 1,\n    child: typeof cart.children !== 'undefined' ? +cart.children : 0,\n    room_type: roomDetails ? roomDetails.type.id : 0,\n    room_scenic: roomDetails ? roomDetails.view.id : 0,\n    price: totals.final,\n    coupon_code: cart.coupon && cart.coupon.data.code ? cart.coupon.data.code : '',\n    card_name: inputs.cardHolder.value,\n    card_number: inputs.cardNumber.value,\n    card_date_month: inputs.month.value,\n    card_date_year: inputs.year.value,\n    card_cvv: inputs.cardCvv.value\n  };\n  return {\n    type: NEW_RESERVATION,\n    data\n  };\n};\nexport const setNewReservation = payload => {\n  logger.debug('[actions]', 'setNewReservation', payload);\n  const data = {\n    data: payload,\n    status: 'resolved',\n    error: ''\n  }; // Save reservationId\n\n  if (payload.id) {\n    localStorage.setItem('reservationId', payload.id.toString());\n  }\n\n  return {\n    type: NEW_RESERVATION_FINISH,\n    data\n  };\n};\nexport const newReservationFailed = error => {\n  logger.debug('[actions]', 'newReservationFailed');\n  return {\n    type: NEW_RESERVATION_FAILED,\n    error\n  };\n};\nexport const deleteReservation = () => {\n  const reservationId = getStoredValue('reservationId');\n  logger.debug('[actions]', 'deleteReservation', reservationId);\n\n  if (!reservationId) {\n    return {\n      type: DELETE_RESERVATION_FAILED,\n      error: 'Cannot find reservation ID.'\n    };\n  }\n\n  return {\n    type: DELETE_RESERVATION,\n    reservationId\n  };\n};\nexport const finishDeleteReservation = payload => {\n  logger.debug('[actions]', 'finishDeleteReservation', payload);\n  const data = {\n    data: payload,\n    status: 'resolved',\n    error: ''\n  };\n  clearStoredValues();\n  return {\n    type: DELETE_RESERVATION_FINISH,\n    data\n  };\n};\nexport const deleteReservationFailed = error => {\n  logger.debug('[actions]', 'deleteReservationFailed');\n  return {\n    type: DELETE_RESERVATION_FAILED,\n    error\n  };\n};","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/stores/cart/actions.ts"],"names":["logger","getTwoDatesDiff","getRoomDetails","getStoredValue","clearStoredValues","getTotals","UPDATE_CART","CHECK_COUPON","APPLY_COUPON","CHECK_COUPON_FAILED","NEW_RESERVATION","NEW_RESERVATION_FINISH","NEW_RESERVATION_FAILED","DELETE_RESERVATION","DELETE_RESERVATION_FINISH","DELETE_RESERVATION_FAILED","transformInputs","inputs","inputsKeys","Object","keys","inputsLen","length","newInputs","i","key","value","updateCart","debug","transformedInputs","checkin","checkout","hotel","type","data","checkCoupon","couponCode","applyCoupon","coupon","status","error","applyCouponFailed","newReservation","cart","hotelsDetails","roomDetails","totals","hotel_id","hotelId","start_date","end_date","adult","adults","child","children","room_type","id","room_scenic","view","price","final","coupon_code","code","card_name","cardHolder","card_number","cardNumber","card_date_month","month","card_date_year","year","card_cvv","cardCvv","setNewReservation","payload","localStorage","setItem","toString","newReservationFailed","deleteReservation","reservationId","finishDeleteReservation","deleteReservationFailed"],"mappings":"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","sourcesContent":["import {\n    logger,\n    getTwoDatesDiff,\n    getRoomDetails,\n    getStoredValue,\n    clearStoredValues,\n    getTotals\n} from 'lib/scripts/utils';\nimport {\n    UPDATE_CART,\n    CHECK_COUPON,\n    APPLY_COUPON,\n    CHECK_COUPON_FAILED,\n    NEW_RESERVATION,\n    NEW_RESERVATION_FINISH,\n    NEW_RESERVATION_FAILED,\n    DELETE_RESERVATION,\n    DELETE_RESERVATION_FINISH,\n    DELETE_RESERVATION_FAILED\n} from './constants';\n\ntype TypeInputValue = string | number;\n\ntype TypeInputsValues = {\n    [fieldName: string]: TypeInputValue;\n};\n\nconst transformInputs = (inputs: TypeInputs): TypeInputsValues => {\n    const inputsKeys = Object.keys(inputs);\n    const inputsLen = inputsKeys.length;\n    const newInputs: TypeInputsValues = {};\n\n    if (!inputsLen) return {};\n\n    for (let i = 0; i < inputsLen; i += 1) {\n        const key = inputsKeys[i];\n        const value = inputs[key].value;\n        newInputs[key] = value;\n    }\n\n    return newInputs;\n};\n\nexport const updateCart = (inputs: TypeInputs) => {\n    logger.debug('[actions]', 'updateCart', inputs);\n\n    const transformedInputs = transformInputs(inputs);\n\n    if (typeof transformedInputs.checkin !== 'undefined' && typeof transformedInputs.checkout !== 'undefined') {\n        transformedInputs['days'] = getTwoDatesDiff(transformedInputs.checkin, transformedInputs.checkout);\n    }\n\n    if (typeof transformedInputs.hotel !== 'undefined') {\n        transformedInputs['hotelId'] = transformedInputs.hotel;\n        delete transformedInputs.hotel;\n    }\n\n    return {\n        type: UPDATE_CART,\n        data: transformedInputs\n    };\n};\n\nexport const checkCoupon = (couponCode: string) => {\n    logger.debug('[actions]', 'checkCoupon', couponCode);\n\n    return {\n        type: CHECK_COUPON,\n        couponCode\n    };\n};\n\nexport const applyCoupon = (coupon: TypeCoupon) => {\n    logger.debug('[actions]', 'applyCoupon', coupon);\n\n    const data = {\n        data: { ...coupon },\n        status: 'resolved',\n        error: ''\n    };\n\n    return {\n        type: APPLY_COUPON,\n        data\n    };\n};\n\nexport const applyCouponFailed = (error: string) => {\n    logger.debug('[actions]', 'applyCouponFailed');\n\n    return {\n        type: CHECK_COUPON_FAILED,\n        error\n    };\n};\n\nexport const newReservation = (\n    cart: TypeCartDetails['cart'],\n    hotelsDetails: TypeHotelDetails[],\n    inputs: TypeInputs\n) => {\n    logger.debug('[actions]', 'newReservation', cart);\n\n    const roomDetails = getRoomDetails(cart, hotelsDetails);\n    const totals = getTotals(cart, hotelsDetails);\n\n    const data: TypeNewReservation = {\n        hotel_id: cart.hotelId ? +cart.hotelId : 0,\n        start_date: cart.checkin ? cart.checkin : '',\n        end_date: cart.checkout ? cart.checkout : '',\n        adult: cart.adults ? +cart.adults : 1,\n        child: typeof cart.children !== 'undefined' ? +cart.children : 0,\n        room_type: roomDetails ? roomDetails.type.id : 0,\n        room_scenic: roomDetails ? roomDetails.view.id : 0,\n        price: totals.final,\n        coupon_code: cart.coupon && cart.coupon.data.code ? cart.coupon.data.code : '',\n        card_name: inputs.cardHolder.value,\n        card_number: inputs.cardNumber.value,\n        card_date_month: inputs.month.value,\n        card_date_year: inputs.year.value,\n        card_cvv: inputs.cardCvv.value\n    };\n\n    return {\n        type: NEW_RESERVATION,\n        data\n    };\n};\n\nexport const setNewReservation = (payload: TypeNewReservation) => {\n    logger.debug('[actions]', 'setNewReservation', payload);\n\n    const data = {\n        data: payload,\n        status: 'resolved',\n        error: ''\n    };\n\n    // Save reservationId\n    if (payload.id) {\n        localStorage.setItem('reservationId', payload.id.toString());\n    }\n\n    return {\n        type: NEW_RESERVATION_FINISH,\n        data\n    };\n};\n\nexport const newReservationFailed = (error: string) => {\n    logger.debug('[actions]', 'newReservationFailed');\n\n    return {\n        type: NEW_RESERVATION_FAILED,\n        error\n    };\n};\n\nexport const deleteReservation = () => {\n    const reservationId = getStoredValue<string>('reservationId');\n    logger.debug('[actions]', 'deleteReservation', reservationId);\n\n    if (!reservationId) {\n        return {\n            type: DELETE_RESERVATION_FAILED,\n            error: 'Cannot find reservation ID.'\n        };\n    }\n\n    return {\n        type: DELETE_RESERVATION,\n        reservationId\n    };\n};\n\nexport const finishDeleteReservation = (payload: TypeNewReservation) => {\n    logger.debug('[actions]', 'finishDeleteReservation', payload);\n\n    const data = {\n        data: payload,\n        status: 'resolved',\n        error: ''\n    };\n\n    clearStoredValues();\n\n    return {\n        type: DELETE_RESERVATION_FINISH,\n        data\n    };\n};\n\nexport const deleteReservationFailed = (error: string) => {\n    logger.debug('[actions]', 'deleteReservationFailed');\n\n    return {\n        type: DELETE_RESERVATION_FAILED,\n        error\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
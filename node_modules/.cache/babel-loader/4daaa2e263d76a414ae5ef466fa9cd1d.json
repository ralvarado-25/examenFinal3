{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raula\\\\Downloads\\\\final\\\\react-hotel-reservation-system-main\\\\src\\\\components\\\\Form\\\\TextField\\\\TextField.tsx\";\nimport React, { memo } from 'react';\nimport { validator, logger, compareProps } from 'lib/scripts/utils';\nimport inputClasses from './TextField.module.scss';\nimport formClasses from '../Form.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextField = /*#__PURE__*/React.forwardRef(_c = ({\n  id,\n  onChange,\n  value,\n  validity,\n  validators,\n  isTouched,\n  type,\n  placeholder,\n  autocomplete,\n  label,\n  validationMessage,\n  disabled,\n  disabledMessage\n}, ref) => {\n  logger.debug('[TextField.ts]', id);\n\n  const changeHandler = event => {\n    const value = event.target.value;\n    const isValid = validator(value, validators);\n    onChange(id, value, isValid);\n  };\n\n  const wrapperClasses = [formClasses['form__element'], inputClasses['input'], inputClasses['input--simple']];\n  if (validity === false && isTouched) wrapperClasses.push(inputClasses['invalid']);\n  if (value) wrapperClasses.push(inputClasses['has-value']);\n  let labelClasses = [formClasses['form__label']];\n  const additionalAttrs = {};\n\n  if (typeof disabled !== 'undefined' && disabled) {\n    additionalAttrs['disabled'] = true;\n  }\n\n  if (typeof ref !== 'undefined' && ref) {\n    additionalAttrs['ref'] = ref;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: wrapperClasses.join(' '),\n    children: [label && /*#__PURE__*/_jsxDEV(\"label\", {\n      className: labelClasses.join(' '),\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputClasses['input__inner-wrapper'],\n      children: type === 'textarea' ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: id,\n        name: id,\n        className: inputClasses['input__field'],\n        rows: 3,\n        onChange: changeHandler,\n        value: value,\n        ...additionalAttrs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        id: id,\n        name: id,\n        className: inputClasses['input__field'],\n        type: type,\n        placeholder: placeholder,\n        autoComplete: autocomplete,\n        onChange: changeHandler,\n        value: value,\n        ...additionalAttrs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: formClasses['form__info'],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: formClasses['form__info__content'],\n        children: [validity === false && isTouched && validationMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: formClasses['form__info__invalid-text'],\n          children: validationMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this), additionalAttrs['disabled'] === true && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: formClasses['form__info__warning-text'],\n          children: disabledMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 13\n  }, this);\n});\n/**\n * Prevent re-rendering all the inputs when one of them changes!\n * Because the form hook is producing a new state immutably,\n * so the prevProps and nextProps cannot be equal even if they haven't changed!!\n */\n\n_c2 = TextField;\n\nfunction areEqual(prevProps, nextProps) {\n  const compareKeys = ['value', 'validity', 'validators', 'isTouched', 'disabled'];\n  const areEqual = compareProps(prevProps, nextProps, compareKeys);\n  return areEqual;\n}\n\nexport default _c3 = /*#__PURE__*/memo(TextField, areEqual);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TextField$React.forwardRef\");\n$RefreshReg$(_c2, \"TextField\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/components/Form/TextField/TextField.tsx"],"names":["React","memo","validator","logger","compareProps","inputClasses","formClasses","TextField","forwardRef","id","onChange","value","validity","validators","isTouched","type","placeholder","autocomplete","label","validationMessage","disabled","disabledMessage","ref","debug","changeHandler","event","target","isValid","wrapperClasses","push","labelClasses","additionalAttrs","join","areEqual","prevProps","nextProps","compareKeys"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, memo } from 'react';\n\nimport { validator, logger, compareProps } from 'lib/scripts/utils';\n\nimport inputClasses from './TextField.module.scss';\nimport formClasses from '../Form.module.scss';\n\ntype TypeTextFieldProps = {\n    id: string;\n    onChange: TypeInputOnChange;\n    value?: string;\n    validity?: boolean;\n    validators?: TypeValidator[];\n    isTouched?: boolean;\n    type: 'text' | 'date' | 'number' | 'tel' | 'email' | 'password' | 'textarea';\n    placeholder?: string;\n    autocomplete?: string;\n    label?: string;\n    validationMessage?: string;\n    disabled?: boolean;\n    disabledMessage?: string;\n};\n\nconst TextField = React.forwardRef<HTMLInputElement, TypeTextFieldProps>(\n    (\n        {\n            id,\n            onChange,\n            value,\n            validity,\n            validators,\n            isTouched,\n            type,\n            placeholder,\n            autocomplete,\n            label,\n            validationMessage,\n            disabled,\n            disabledMessage\n        }: TypeTextFieldProps,\n        ref\n    ) => {\n        logger.debug('[TextField.ts]', id);\n\n        const changeHandler = (event: ChangeEvent) => {\n            const value = (event.target as HTMLInputElement).value;\n            const isValid = validator(value, validators);\n            onChange(id, value, isValid);\n        };\n\n        const wrapperClasses = [formClasses['form__element'], inputClasses['input'], inputClasses['input--simple']];\n        if (validity === false && isTouched) wrapperClasses.push(inputClasses['invalid']);\n        if (value) wrapperClasses.push(inputClasses['has-value']);\n        let labelClasses = [formClasses['form__label']];\n\n        const additionalAttrs: any = {};\n        if (typeof disabled !== 'undefined' && disabled) {\n            additionalAttrs['disabled'] = true;\n        }\n        if (typeof ref !== 'undefined' && ref) {\n            additionalAttrs['ref'] = ref;\n        }\n\n        return (\n            <div className={wrapperClasses.join(' ')}>\n                {label && (\n                    <label className={labelClasses.join(' ')} htmlFor={id}>\n                        {label}\n                    </label>\n                )}\n\n                <div className={inputClasses['input__inner-wrapper']}>\n                    {type === 'textarea' ? (\n                        <textarea\n                            id={id}\n                            name={id}\n                            className={inputClasses['input__field']}\n                            rows={3}\n                            onChange={changeHandler}\n                            value={value}\n                            {...additionalAttrs}\n                        />\n                    ) : (\n                        <input\n                            id={id}\n                            name={id}\n                            className={inputClasses['input__field']}\n                            type={type}\n                            placeholder={placeholder}\n                            autoComplete={autocomplete}\n                            onChange={changeHandler}\n                            value={value}\n                            {...additionalAttrs}\n                        />\n                    )}\n                </div>\n\n                <div className={formClasses['form__info']}>\n                    <div className={formClasses['form__info__content']}>\n                        {validity === false && isTouched && validationMessage && (\n                            <p className={formClasses['form__info__invalid-text']}>{validationMessage}</p>\n                        )}\n                        {additionalAttrs['disabled'] === true && (\n                            <p className={formClasses['form__info__warning-text']}>{disabledMessage}</p>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n);\n\n/**\n * Prevent re-rendering all the inputs when one of them changes!\n * Because the form hook is producing a new state immutably,\n * so the prevProps and nextProps cannot be equal even if they haven't changed!!\n */\nfunction areEqual(prevProps: TypeTextFieldProps, nextProps: TypeTextFieldProps) {\n    const compareKeys = ['value', 'validity', 'validators', 'isTouched', 'disabled'];\n    const areEqual = compareProps<TypeTextFieldProps>(prevProps, nextProps, compareKeys);\n    return areEqual;\n}\n\nexport default memo(TextField, areEqual);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) continue;\n\n        if (inputId === action.inputId) {\n          // Current field\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          // Other fields\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      const newInput = { ...state.inputs[action.inputId],\n        value: action.value,\n        isValid: action.isValid\n      };\n      const newInputs = { ...state.inputs,\n        [action.inputId]: newInput\n      }; // Check isTouched\n\n      if (!state.inputs[action.inputId].isTouched) {\n        newInput.isTouched = true;\n      }\n\n      return { ...state,\n        inputs: newInputs,\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst useForm = (initialInputs = {}, initialFormValidity = false) => {\n  _s();\n\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      inputId: id,\n      value,\n      isValid: isValid\n    });\n  }, []);\n  return [formState, inputHandler];\n};\n\n_s(useForm, \"dKAsKCUZAaznPKNbzbg74uJ1MgQ=\");\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/hooks/useForm.ts"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","newInput","value","newInputs","isTouched","useForm","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AASA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAuBC,MAAvB,KAAuC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,UAAIC,WAAW,GAAG,IAAlB;;AAEA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAChC,YAAI,CAACL,KAAK,CAACK,MAAN,CAAaD,OAAb,CAAL,EAA4B;;AAE5B,YAAIA,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC5B;AACAD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACH,SAHD,MAGO;AACH;AACAH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACH;AACJ;;AAED,YAAMC,QAAQ,GAAG,EACb,GAAGP,KAAK,CAACK,MAAN,CAAaJ,MAAM,CAACG,OAApB,CADU;AAEbI,QAAAA,KAAK,EAAEP,MAAM,CAACO,KAFD;AAGbF,QAAAA,OAAO,EAAEL,MAAM,CAACK;AAHH,OAAjB;AAMA,YAAMG,SAAS,GAAG,EACd,GAAGT,KAAK,CAACK,MADK;AAEd,SAACJ,MAAM,CAACG,OAAR,GAAkBG;AAFJ,OAAlB,CArBJ,CA0BI;;AACA,UAAI,CAACP,KAAK,CAACK,MAAN,CAAaJ,MAAM,CAACG,OAApB,EAA6BM,SAAlC,EAA6C;AACzCH,QAAAA,QAAQ,CAACG,SAAT,GAAqB,IAArB;AACH;;AAED,aAAO,EACH,GAAGV,KADA;AAEHK,QAAAA,MAAM,EAAEI,SAFL;AAGHH,QAAAA,OAAO,EAAEH;AAHN,OAAP;;AAMJ;AACI,aAAOH,KAAP;AAvCR;AAyCH,CA1CD;;AA4CA,MAAMW,OAAO,GAAG,CACZC,aAAyB,GAAG,EADhB,EAEZC,mBAA4B,GAAG,KAFnB,KAG+F;AAAA;;AAC3G,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBjB,UAAU,CAACC,WAAD,EAAc;AAClDM,IAAAA,MAAM,EAAEO,aAD0C;AAElDN,IAAAA,OAAO,EAAEO;AAFyC,GAAd,CAAxC;AAKA,QAAMG,YAAY,GAAGnB,WAAW,CAAC,CAACoB,EAAD,EAAaT,KAAb,EAAqCF,OAArC,KAA0D;AACvFS,IAAAA,QAAQ,CAAC;AACLb,MAAAA,IAAI,EAAE,cADD;AAELE,MAAAA,OAAO,EAAEa,EAFJ;AAGLT,MAAAA,KAHK;AAILF,MAAAA,OAAO,EAAEA;AAJJ,KAAD,CAAR;AAMH,GAP+B,EAO7B,EAP6B,CAAhC;AASA,SAAO,CAACQ,SAAD,EAAYE,YAAZ,CAAP;AACH,CAnBD;;GAAML,O;;AAqBN,eAAeA,OAAf","sourcesContent":["import { useCallback, useReducer } from 'react';\n\ndeclare global {\n    type TypeFormState = {\n        inputs: TypeInputs;\n        isValid: boolean;\n    };\n}\n\nconst formReducer = (state: TypeFormState, action: any) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n\n            for (const inputId in state.inputs) {\n                if (!state.inputs[inputId]) continue;\n\n                if (inputId === action.inputId) {\n                    // Current field\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    // Other fields\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n\n            const newInput = {\n                ...state.inputs[action.inputId],\n                value: action.value,\n                isValid: action.isValid\n            };\n\n            const newInputs = {\n                ...state.inputs,\n                [action.inputId]: newInput\n            };\n\n            // Check isTouched\n            if (!state.inputs[action.inputId].isTouched) {\n                newInput.isTouched = true;\n            }\n\n            return {\n                ...state,\n                inputs: newInputs,\n                isValid: formIsValid\n            };\n\n        default:\n            return state;\n    }\n};\n\nconst useForm = (\n    initialInputs: TypeInputs = {},\n    initialFormValidity: boolean = false\n): [formState: TypeFormState, inputHandler: (id: string, value: string | number, isValid: boolean) => void] => {\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n    const inputHandler = useCallback((id: string, value: string | number, isValid: boolean) => {\n        dispatch({\n            type: 'INPUT_CHANGE',\n            inputId: id,\n            value,\n            isValid: isValid\n        });\n    }, []);\n\n    return [formState, inputHandler];\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}
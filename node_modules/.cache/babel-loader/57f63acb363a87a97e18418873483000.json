{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raula\\\\Downloads\\\\final\\\\react-hotel-reservation-system-main\\\\src\\\\components\\\\Form\\\\ImageCheckbox\\\\ImageCheckbox.tsx\";\nimport React, { memo } from 'react';\nimport { validator, logger, compareProps } from 'lib/scripts/utils';\nimport checkboxClasses from './ImageCheckbox.module.scss';\nimport formClasses from '../Form.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ImageCheckbox = ({\n  id,\n  onChange,\n  value,\n  validity,\n  validators,\n  isTouched,\n  label,\n  validationMessage,\n  options\n}) => {\n  logger.debug('[ImageCheckbox.ts]');\n\n  const changeHandler = event => {\n    const value = event.target.value;\n    const isValid = validator(value, validators);\n    onChange(id, value, isValid);\n  };\n\n  const wrapperClasses = [formClasses['form__element']];\n  if (validity === false && isTouched) wrapperClasses.push(checkboxClasses['invalid']);\n  wrapperClasses.push(checkboxClasses['image-checkboxes']);\n  if (!label) wrapperClasses.push(checkboxClasses['checkbox--no-label']);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: wrapperClasses.join(' '),\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: formClasses['form__label'],\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: checkboxClasses['image-checkboxes__inner'],\n        children: options.length > 0 && options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: checkboxClasses['image-checkbox'],\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            id: option.id,\n            name: id,\n            className: checkboxClasses['image-checkbox__field'],\n            onChange: changeHandler,\n            value: option.id,\n            checked: option.id === value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: option.id,\n            className: checkboxClasses['image-checkbox__label'],\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: checkboxClasses['image-checkbox__label__title'],\n              children: option.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 37\n            }, this), option.imgUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: checkboxClasses['image-checkbox__label__img-wrapper'],\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: option.imgUrl,\n                alt: option.label,\n                className: checkboxClasses['image-checkbox__label__img']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 41\n            }, this), option.meta && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: checkboxClasses['image-checkbox__label__meta'],\n              children: option.meta\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: formClasses['form__info'],\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: formClasses['form__info__content'],\n          children: validity === false && isTouched && !!validationMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: formClasses['form__info__invalid-text'],\n            children: !!validationMessage && validationMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n/**\n * Prevent re-rendering all the inputs when one of them changes!\n * Because the form hook is producing a new state immutably,\n * so the prevProps and nextProps cannot be equal even if they haven't changed!!\n */\n\n\n_c = ImageCheckbox;\n\nfunction areEqual(prevProps, nextProps) {\n  const compareKeys = ['options', 'value', 'validity', 'validators', 'isTouched'];\n  const areEqual = compareProps(prevProps, nextProps, compareKeys);\n  return areEqual;\n}\n\nexport default _c2 = /*#__PURE__*/memo(ImageCheckbox, areEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImageCheckbox\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/components/Form/ImageCheckbox/ImageCheckbox.tsx"],"names":["React","memo","validator","logger","compareProps","checkboxClasses","formClasses","ImageCheckbox","id","onChange","value","validity","validators","isTouched","label","validationMessage","options","debug","changeHandler","event","target","isValid","wrapperClasses","push","join","length","map","option","index","imgUrl","meta","areEqual","prevProps","nextProps","compareKeys"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, memo } from 'react';\n\nimport { validator, logger, compareProps } from 'lib/scripts/utils';\n\nimport checkboxClasses from './ImageCheckbox.module.scss';\nimport formClasses from '../Form.module.scss';\n\ntype TypeOption = {\n    id: string;\n    label: string;\n    meta: React.ReactNode;\n    imgUrl: string;\n};\n\ntype TypeImageCheckboxProps = {\n    id: string;\n    onChange: TypeInputOnChange;\n    value?: string;\n    validity?: boolean;\n    validators?: TypeValidator[];\n    isTouched?: boolean;\n    label?: string;\n    validationMessage?: string;\n    options: TypeOption[];\n};\n\nconst ImageCheckbox: React.FC<TypeImageCheckboxProps> = ({\n    id,\n    onChange,\n    value,\n    validity,\n    validators,\n    isTouched,\n    label,\n    validationMessage,\n    options\n}: TypeImageCheckboxProps) => {\n    logger.debug('[ImageCheckbox.ts]');\n\n    const changeHandler = (event: ChangeEvent) => {\n        const value = (event.target as HTMLInputElement).value;\n        const isValid = validator(value, validators);\n        onChange(id, value, isValid);\n    };\n\n    const wrapperClasses = [formClasses['form__element']];\n    if (validity === false && isTouched) wrapperClasses.push(checkboxClasses['invalid']);\n    wrapperClasses.push(checkboxClasses['image-checkboxes']);\n    if (!label) wrapperClasses.push(checkboxClasses['checkbox--no-label']);\n\n    return (\n        <>\n            <div className={wrapperClasses.join(' ')}>\n                <h4 className={formClasses['form__label']}>{label}</h4>\n                <div className={checkboxClasses['image-checkboxes__inner']}>\n                    {options.length > 0 &&\n                        options.map((option: TypeOption, index) => (\n                            <div className={checkboxClasses['image-checkbox']} key={index}>\n                                <input\n                                    type=\"radio\"\n                                    id={option.id}\n                                    name={id}\n                                    className={checkboxClasses['image-checkbox__field']}\n                                    onChange={changeHandler}\n                                    value={option.id}\n                                    checked={option.id === value}\n                                />\n                                <label htmlFor={option.id} className={checkboxClasses['image-checkbox__label']}>\n                                    <h5 className={checkboxClasses['image-checkbox__label__title']}>{option.label}</h5>\n                                    {option.imgUrl && (\n                                        <div className={checkboxClasses['image-checkbox__label__img-wrapper']}>\n                                            <img\n                                                src={option.imgUrl}\n                                                alt={option.label}\n                                                className={checkboxClasses['image-checkbox__label__img']}\n                                            />\n                                        </div>\n                                    )}\n                                    {option.meta && (\n                                        <p className={checkboxClasses['image-checkbox__label__meta']}>{option.meta}</p>\n                                    )}\n                                </label>\n                            </div>\n                        ))}\n                </div>\n\n                <div className={formClasses['form__info']}>\n                    <div className={formClasses['form__info__content']}>\n                        {validity === false && isTouched && !!validationMessage && (\n                            <p className={formClasses['form__info__invalid-text']}>\n                                {!!validationMessage && validationMessage}\n                            </p>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\n/**\n * Prevent re-rendering all the inputs when one of them changes!\n * Because the form hook is producing a new state immutably,\n * so the prevProps and nextProps cannot be equal even if they haven't changed!!\n */\nfunction areEqual(prevProps: TypeImageCheckboxProps, nextProps: TypeImageCheckboxProps) {\n    const compareKeys = ['options', 'value', 'validity', 'validators', 'isTouched'];\n    const areEqual = compareProps<TypeImageCheckboxProps>(prevProps, nextProps, compareKeys);\n    return areEqual;\n}\n\nexport default memo(ImageCheckbox, areEqual);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raula\\\\Downloads\\\\final\\\\react-hotel-reservation-system-main\\\\src\\\\containers\\\\Steps\\\\PreviewPayment\\\\PreviewPayment.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport validatorjs from 'validator';\nimport { useForm, useLocalStorage, useCart, useCreditCard } from 'hooks';\nimport { Portlet, Button, CreditCard, ReservationDetails, Select, TextField } from 'components';\nimport { getCreditCardYears, getCreditCardMonths, isValidName, ccNumberMaskPipe } from 'lib/scripts/utils';\nimport formClasses from 'components/Form/Form.module.scss';\nimport styleClasses from './PreviewPayment.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst step = {\n  index: 2,\n  isValid: false,\n  inputs: {\n    cardHolder: {\n      value: '',\n      isTouched: false,\n      isValid: false\n    },\n    cardNumber: {\n      value: '',\n      isTouched: false,\n      isValid: false\n    },\n    month: {\n      value: '',\n      isTouched: false,\n      isValid: false\n    },\n    year: {\n      value: '',\n      isTouched: false,\n      isValid: false\n    },\n    cardCvv: {\n      value: '',\n      isTouched: false,\n      isValid: false\n    }\n  }\n};\n\nconst PreviewPayment = props => {\n  _s();\n\n  const [storedValue, setLocalStorageValue] = useLocalStorage(`step-${step.index}`, step);\n  const [formState, inputHandler] = useForm(storedValue.inputs, storedValue.isValid);\n  const {\n    cart,\n    dispatchNewReservation\n  } = useCart();\n  const {\n    cardDetails,\n    updateCardDetails,\n    isCardFlipped,\n    turnCardHandler\n  } = useCreditCard();\n  const [monthOptions, setMonthOptions] = useState([]); // Re-set months select options, if the selected year is the current year, months options should not be 12.\n\n  useEffect(() => {\n    if (!monthOptions.length) {\n      setMonthOptions(getCreditCardMonths(formState.inputs.year.value).map(month => ({\n        label: month,\n        value: month\n      })));\n    }\n  }, [formState.inputs.year.value, monthOptions.length]); // Go to next step if the newReservation is resolved\n\n  useEffect(() => {\n    if (cart.newReservation.status === 'resolved') {\n      props.stepChangeHandler(step.index, formState, step.index + 1);\n      setLocalStorageValue({ ...step,\n        isValid: formState.isValid,\n        inputs: { ...formState.inputs\n        }\n      });\n    }\n  }, [cart.newReservation.status, formState, props, setLocalStorageValue]);\n  return monthOptions.length && Object.keys(formState.inputs).length ? /*#__PURE__*/_jsxDEV(Portlet, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styleClasses['preview-payment'],\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleClasses['preview-payment__card'],\n          onClick: turnCardHandler,\n          children: /*#__PURE__*/_jsxDEV(CreditCard, {\n            inputs: formState.inputs,\n            isCardFlipped: isCardFlipped,\n            details: cardDetails\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleClasses['preview-payment__details'],\n          children: /*#__PURE__*/_jsxDEV(ReservationDetails, {\n            type: \"boxes\",\n            show: ['checkin', 'checkout', 'adults', 'children', 'room', 'view', 'coupon', 'totals']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleClasses['preview-payment__form'],\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: formClasses['form__wide-row'],\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"cardHolder\",\n              type: \"text\",\n              label: \"Nombre del titular de la tarjeta\",\n              value: formState.inputs.cardHolder.value,\n              validity: formState.inputs.cardHolder.isValid,\n              isTouched: formState.inputs.cardHolder.isTouched,\n              validators: [[isValidName]],\n              validationMessage: \"Por favor  ingrese el nombre del titular de la tarjeta\",\n              onChange: inputHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: formClasses['form__wide-row'],\n            children: [cardDetails.icon && /*#__PURE__*/_jsxDEV(\"img\", {\n              className: styleClasses['credit-card-icon'],\n              src: cardDetails.icon,\n              alt: \"Bank logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"cardNumber\",\n              type: \"text\",\n              label: \"Card number\",\n              value: formState.inputs.cardNumber.value,\n              validity: formState.inputs.cardNumber.isValid,\n              isTouched: formState.inputs.cardNumber.isTouched,\n              validators: [[validatorjs.isCreditCard]],\n              validationMessage: \"Please enter a valid card number\",\n              onChange: (id, value, validity) => {\n                inputHandler(id, ccNumberMaskPipe(value), validity);\n                updateCardDetails(value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: formClasses['form__wide-row'],\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: formClasses['form__have-two'],\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: formClasses['form__label'],\n                children: \"Card expiration date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                id: \"month\",\n                options: monthOptions,\n                onChange: inputHandler,\n                value: formState.inputs.month.value,\n                validity: formState.inputs.month.isValid,\n                isTouched: formState.inputs.month.isTouched,\n                validators: [[validatorjs.isLength, {\n                  min: 1,\n                  max: undefined\n                }]],\n                validationMessage: \"Please select a valid expiration month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                id: \"year\",\n                options: getCreditCardYears().map(year => ({\n                  label: year.toString(),\n                  value: year.toString()\n                })),\n                onChange: (id, value, validity) => {\n                  inputHandler(id, value, validity);\n                  setMonthOptions(getCreditCardMonths(value).map(month => ({\n                    label: month,\n                    value: month\n                  })));\n                  const month = formState.inputs.month.value;\n                  const isCurrentYear = +value === new Date().getFullYear();\n                  const isPassedMonth = month && +month < new Date().getMonth() + 1;\n\n                  if (isCurrentYear && isPassedMonth) {\n                    inputHandler('month', '', false);\n                  }\n                },\n                value: formState.inputs.year.value,\n                validity: formState.inputs.year.isValid,\n                isTouched: formState.inputs.year.isTouched,\n                validators: [[validatorjs.isLength, {\n                  min: 1,\n                  max: undefined\n                }]],\n                validationMessage: \"Please select a valid expiration year\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"cardCvv\",\n              type: \"text\",\n              label: \"CVV\",\n              value: formState.inputs.cardCvv.value,\n              validity: formState.inputs.cardCvv.isValid,\n              isTouched: formState.inputs.cardCvv.isTouched,\n              validators: [[validatorjs.isNumeric], [validatorjs.isLength, {\n                min: 3,\n                max: 4\n              }]],\n              validationMessage: \"Please enter a valid CVV\",\n              onChange: inputHandler,\n              ref: turnCardHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), cart.newReservation && cart.newReservation.status === 'rejected' && cart.newReservation.error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: formClasses['form__wide-row'],\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: formClasses['form__error'],\n              children: cart.newReservation.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: [formClasses['form__normal-row'], formClasses['form__actions']].join(' '),\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          color: \"none\",\n          onClick: () => {\n            props.stepChangeHandler(step.index, formState, step.index - 1);\n          },\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          onClick: () => {\n            if (!formState.isValid) return; // Updates/Creates a reservation, the check is done in newReservationSaga\n\n            dispatchNewReservation(formState.inputs);\n          },\n          disabled: !formState.isValid,\n          loading: cart.newReservation.status === 'pending',\n          children: \"Pay and finish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this) : null;\n};\n\n_s(PreviewPayment, \"x8kpLkbjyNGzjaHuJ27iMoKQGQM=\", false, function () {\n  return [useLocalStorage, useForm, useCart, useCreditCard];\n});\n\n_c = PreviewPayment;\nexport default PreviewPayment;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreviewPayment\");","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/containers/Steps/PreviewPayment/PreviewPayment.tsx"],"names":["React","useEffect","useState","validatorjs","useForm","useLocalStorage","useCart","useCreditCard","Portlet","Button","CreditCard","ReservationDetails","Select","TextField","getCreditCardYears","getCreditCardMonths","isValidName","ccNumberMaskPipe","formClasses","styleClasses","step","index","isValid","inputs","cardHolder","value","isTouched","cardNumber","month","year","cardCvv","PreviewPayment","props","storedValue","setLocalStorageValue","formState","inputHandler","cart","dispatchNewReservation","cardDetails","updateCardDetails","isCardFlipped","turnCardHandler","monthOptions","setMonthOptions","length","map","label","newReservation","status","stepChangeHandler","Object","keys","e","preventDefault","icon","isCreditCard","id","validity","isLength","min","max","undefined","toString","isCurrentYear","Date","getFullYear","isPassedMonth","getMonth","isNumeric","error","join"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport validatorjs from 'validator';\n\nimport { useForm, useLocalStorage, useCart, useCreditCard } from 'hooks';\nimport { Portlet, Button, CreditCard, ReservationDetails, Select, TextField } from 'components';\nimport { getCreditCardYears, getCreditCardMonths, isValidName, ccNumberMaskPipe } from 'lib/scripts/utils';\n\nimport formClasses from 'components/Form/Form.module.scss';\nimport styleClasses from './PreviewPayment.module.scss';\n\ndeclare global {\n    type TypeCardDetails = {\n        [stepIndex: string]: {\n            icon: string;\n            single: string;\n            color: string;\n        };\n    };\n}\n\nconst step: TypeStep = {\n    index: 2,\n    isValid: false,\n    inputs: {\n        cardHolder: {\n            value: '',\n            isTouched: false,\n            isValid: false\n        },\n        cardNumber: {\n            value: '',\n            isTouched: false,\n            isValid: false\n        },\n        month: {\n            value: '',\n            isTouched: false,\n            isValid: false\n        },\n        year: {\n            value: '',\n            isTouched: false,\n            isValid: false\n        },\n        cardCvv: {\n            value: '',\n            isTouched: false,\n            isValid: false\n        }\n    }\n};\n\nconst PreviewPayment: React.FC<TypeReservationStep> = (props: TypeReservationStep) => {\n    const [storedValue, setLocalStorageValue] = useLocalStorage(`step-${step.index}`, step);\n    const [formState, inputHandler] = useForm(storedValue.inputs, storedValue.isValid);\n    const { cart, dispatchNewReservation } = useCart();\n    const { cardDetails, updateCardDetails, isCardFlipped, turnCardHandler } = useCreditCard();\n\n    const [monthOptions, setMonthOptions] = useState<TypeOption[]>([]);\n\n    // Re-set months select options, if the selected year is the current year, months options should not be 12.\n    useEffect(() => {\n        if (!monthOptions.length) {\n            setMonthOptions(\n                getCreditCardMonths(formState.inputs.year.value).map((month) => ({\n                    label: month,\n                    value: month\n                }))\n            );\n        }\n    }, [formState.inputs.year.value, monthOptions.length]);\n\n    // Go to next step if the newReservation is resolved\n    useEffect(() => {\n        if (cart.newReservation.status === 'resolved') {\n            props.stepChangeHandler(step.index, formState, step.index + 1);\n            setLocalStorageValue({\n                ...step,\n                isValid: formState.isValid,\n                inputs: { ...formState.inputs }\n            });\n        }\n    }, [cart.newReservation.status, formState, props, setLocalStorageValue]);\n\n    return monthOptions.length && Object.keys(formState.inputs).length ? (\n        <Portlet>\n            <form onSubmit={(e) => e.preventDefault()}>\n                <div className={styleClasses['preview-payment']}>\n                    <div className={styleClasses['preview-payment__card']} onClick={turnCardHandler}>\n                        <CreditCard inputs={formState.inputs} isCardFlipped={isCardFlipped} details={cardDetails} />\n                    </div>\n                    <div className={styleClasses['preview-payment__details']}>\n                        <ReservationDetails\n                            type=\"boxes\"\n                            show={['checkin', 'checkout', 'adults', 'children', 'room', 'view', 'coupon', 'totals']}\n                        />\n                    </div>\n                    <div className={styleClasses['preview-payment__form']}>\n                        <div className={formClasses['form__wide-row']}>\n                            <TextField\n                                id=\"cardHolder\"\n                                type=\"text\"\n                                label=\"Nombre del titular de la tarjeta\"\n                                value={formState.inputs.cardHolder.value}\n                                validity={formState.inputs.cardHolder.isValid}\n                                isTouched={formState.inputs.cardHolder.isTouched}\n                                validators={[[isValidName]]}\n                                validationMessage=\"Por favor  ingrese el nombre del titular de la tarjeta\"\n                                onChange={inputHandler}\n                            />\n                        </div>\n                        <div className={formClasses['form__wide-row']}>\n                            {cardDetails.icon && (\n                                <img\n                                    className={styleClasses['credit-card-icon']}\n                                    src={cardDetails.icon}\n                                    alt=\"Bank logo\"\n                                />\n                            )}\n                            <TextField\n                                id=\"cardNumber\"\n                                type=\"text\"\n                                label=\"Card number\"\n                                value={formState.inputs.cardNumber.value}\n                                validity={formState.inputs.cardNumber.isValid}\n                                isTouched={formState.inputs.cardNumber.isTouched}\n                                validators={[[validatorjs.isCreditCard]]}\n                                validationMessage=\"Please enter a valid card number\"\n                                onChange={(id, value, validity) => {\n                                    inputHandler(id, ccNumberMaskPipe(value), validity);\n                                    updateCardDetails(value);\n                                }}\n                            />\n                        </div>\n                        <div className={formClasses['form__wide-row']}>\n                            <div className={formClasses['form__have-two']}>\n                                <span className={formClasses['form__label']}>Card expiration date</span>\n                                <Select\n                                    id=\"month\"\n                                    options={monthOptions}\n                                    onChange={inputHandler}\n                                    value={formState.inputs.month.value}\n                                    validity={formState.inputs.month.isValid}\n                                    isTouched={formState.inputs.month.isTouched}\n                                    validators={[[validatorjs.isLength, { min: 1, max: undefined }]]}\n                                    validationMessage=\"Please select a valid expiration month\"\n                                />\n                                <Select\n                                    id=\"year\"\n                                    options={getCreditCardYears().map((year) => ({\n                                        label: year.toString(),\n                                        value: year.toString()\n                                    }))}\n                                    onChange={(id, value, validity) => {\n                                        inputHandler(id, value, validity);\n                                        setMonthOptions(\n                                            getCreditCardMonths(value).map((month) => ({\n                                                label: month,\n                                                value: month\n                                            }))\n                                        );\n\n                                        const month = formState.inputs.month.value;\n                                        const isCurrentYear = +value === new Date().getFullYear();\n                                        const isPassedMonth = month && +month < new Date().getMonth() + 1;\n\n                                        if (isCurrentYear && isPassedMonth) {\n                                            inputHandler('month', '', false);\n                                        }\n                                    }}\n                                    value={formState.inputs.year.value}\n                                    validity={formState.inputs.year.isValid}\n                                    isTouched={formState.inputs.year.isTouched}\n                                    validators={[[validatorjs.isLength, { min: 1, max: undefined }]]}\n                                    validationMessage=\"Please select a valid expiration year\"\n                                />\n                            </div>\n                            <TextField\n                                id=\"cardCvv\"\n                                type=\"text\"\n                                label=\"CVV\"\n                                value={formState.inputs.cardCvv.value}\n                                validity={formState.inputs.cardCvv.isValid}\n                                isTouched={formState.inputs.cardCvv.isTouched}\n                                validators={[[validatorjs.isNumeric], [validatorjs.isLength, { min: 3, max: 4 }]]}\n                                validationMessage=\"Please enter a valid CVV\"\n                                onChange={inputHandler}\n                                ref={turnCardHandler}\n                            />\n                        </div>\n\n                        {cart.newReservation && cart.newReservation.status === 'rejected' && cart.newReservation.error && (\n                            <div className={formClasses['form__wide-row']}>\n                                <p className={formClasses['form__error']}>{cart.newReservation.error}</p>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <div className={[formClasses['form__normal-row'], formClasses['form__actions']].join(' ')}>\n                    <Button\n                        type=\"button\"\n                        color=\"none\"\n                        onClick={() => {\n                            props.stepChangeHandler(step.index, formState, step.index - 1);\n                        }}\n                    >\n                        Back\n                    </Button>\n                    <Button\n                        type=\"button\"\n                        onClick={() => {\n                            if (!formState.isValid) return;\n                            // Updates/Creates a reservation, the check is done in newReservationSaga\n                            dispatchNewReservation(formState.inputs);\n                        }}\n                        disabled={!formState.isValid}\n                        loading={cart.newReservation.status === 'pending'}\n                    >\n                        Pay and finish\n                    </Button>\n                </div>\n            </form>\n        </Portlet>\n    ) : null;\n};\n\nexport default PreviewPayment;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { put } from 'redux-saga/effects';\nimport validatorjs from 'validator';\nimport { applyCoupon, applyCouponFailed, setNewReservation, newReservationFailed, finishDeleteReservation, deleteReservationFailed } from './actions';\nimport api from 'apis';\nimport { logger, getStoredValue, handleCatchedError } from 'lib/scripts/utils';\nexport function* checkCouponSaga(payload) {\n  logger.debug('[saga]', 'checkCouponSaga', payload);\n\n  try {\n    const resData = yield api.checkCoupon(payload.couponCode);\n\n    if (!resData.length) {\n      throw new Error('Coupon code is not valid.');\n    } // Validate expiration date\n\n\n    if (!validatorjs.isAfter(resData[0].expiration_at)) {\n      throw new Error('Coupon code is not valid.');\n    }\n\n    yield put(applyCoupon(resData[0]));\n  } catch (error) {\n    yield put(handleCatchedError(applyCouponFailed)(error));\n  }\n}\nexport function* newReservationSaga(payload) {\n  logger.debug('[saga]', 'newReservationSaga', payload);\n  const reservationId = getStoredValue('reservationId');\n\n  try {\n    let resData;\n\n    if (!reservationId) {\n      resData = yield api.newReservation(payload.data);\n    } else {\n      resData = yield api.updateReservation(payload.data, reservationId);\n    }\n\n    yield put(setNewReservation(resData));\n  } catch (error) {\n    yield put(handleCatchedError(newReservationFailed)(error));\n  }\n}\nexport function* deleteReservationSaga(payload) {\n  logger.debug('[saga]', 'newReservationSaga', payload);\n\n  try {\n    const resData = yield api.deleteReservation(payload.reservationId);\n    yield put(finishDeleteReservation(resData));\n  } catch (error) {\n    yield put(handleCatchedError(deleteReservationFailed)(error));\n  }\n}","map":{"version":3,"sources":["C:/Users/raula/Downloads/final/react-hotel-reservation-system-main/src/stores/cart/sagas.ts"],"names":["put","validatorjs","applyCoupon","applyCouponFailed","setNewReservation","newReservationFailed","finishDeleteReservation","deleteReservationFailed","api","logger","getStoredValue","handleCatchedError","checkCouponSaga","payload","debug","resData","checkCoupon","couponCode","length","Error","isAfter","expiration_at","error","newReservationSaga","reservationId","newReservation","data","updateReservation","deleteReservationSaga","deleteReservation"],"mappings":"AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,OAAOC,WAAP,MAAwB,WAAxB;AAEA,SACIC,WADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,EAIIC,oBAJJ,EAKIC,uBALJ,EAMIC,uBANJ,QAOO,WAPP;AAQA,OAAOC,GAAP,MAAgB,MAAhB;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,kBAAjC,QAA2D,mBAA3D;AAEA,OAAO,UAAUC,eAAV,CAA0BC,OAA1B,EAA6C;AAChDJ,EAAAA,MAAM,CAACK,KAAP,CAAa,QAAb,EAAuB,iBAAvB,EAA0CD,OAA1C;;AAEA,MAAI;AACA,UAAME,OAAO,GAAG,MAAMP,GAAG,CAACQ,WAAJ,CAAgBH,OAAO,CAACI,UAAxB,CAAtB;;AACA,QAAI,CAACF,OAAO,CAACG,MAAb,EAAqB;AACjB,YAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH,KAJD,CAKA;;;AACA,QAAI,CAAClB,WAAW,CAACmB,OAAZ,CAAoBL,OAAO,CAAC,CAAD,CAAP,CAAWM,aAA/B,CAAL,EAAoD;AAChD,YAAM,IAAIF,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,UAAMnB,GAAG,CAACE,WAAW,CAACa,OAAO,CAAC,CAAD,CAAR,CAAZ,CAAT;AACH,GAVD,CAUE,OAAOO,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACW,kBAAkB,CAACR,iBAAD,CAAlB,CAAsCmB,KAAtC,CAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,kBAAV,CAA6BV,OAA7B,EAAgD;AACnDJ,EAAAA,MAAM,CAACK,KAAP,CAAa,QAAb,EAAuB,oBAAvB,EAA6CD,OAA7C;AAEA,QAAMW,aAAa,GAAGd,cAAc,CAAS,eAAT,CAApC;;AAEA,MAAI;AACA,QAAIK,OAAJ;;AACA,QAAI,CAACS,aAAL,EAAoB;AAChBT,MAAAA,OAAO,GAAG,MAAMP,GAAG,CAACiB,cAAJ,CAAmBZ,OAAO,CAACa,IAA3B,CAAhB;AACH,KAFD,MAEO;AACHX,MAAAA,OAAO,GAAG,MAAMP,GAAG,CAACmB,iBAAJ,CAAsBd,OAAO,CAACa,IAA9B,EAAoCF,aAApC,CAAhB;AACH;;AACD,UAAMxB,GAAG,CAACI,iBAAiB,CAACW,OAAD,CAAlB,CAAT;AACH,GARD,CAQE,OAAOO,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACW,kBAAkB,CAACN,oBAAD,CAAlB,CAAyCiB,KAAzC,CAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUM,qBAAV,CAAgCf,OAAhC,EAAmD;AACtDJ,EAAAA,MAAM,CAACK,KAAP,CAAa,QAAb,EAAuB,oBAAvB,EAA6CD,OAA7C;;AAEA,MAAI;AACA,UAAME,OAA2B,GAAG,MAAMP,GAAG,CAACqB,iBAAJ,CAAsBhB,OAAO,CAACW,aAA9B,CAA1C;AACA,UAAMxB,GAAG,CAACM,uBAAuB,CAACS,OAAD,CAAxB,CAAT;AACH,GAHD,CAGE,OAAOO,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACW,kBAAkB,CAACJ,uBAAD,CAAlB,CAA4Ce,KAA5C,CAAD,CAAT;AACH;AACJ","sourcesContent":["import { put } from 'redux-saga/effects';\nimport validatorjs from 'validator';\n\nimport {\n    applyCoupon,\n    applyCouponFailed,\n    setNewReservation,\n    newReservationFailed,\n    finishDeleteReservation,\n    deleteReservationFailed\n} from './actions';\nimport api from 'apis';\nimport { logger, getStoredValue, handleCatchedError } from 'lib/scripts/utils';\n\nexport function* checkCouponSaga(payload: any): any {\n    logger.debug('[saga]', 'checkCouponSaga', payload);\n\n    try {\n        const resData = yield api.checkCoupon(payload.couponCode);\n        if (!resData.length) {\n            throw new Error('Coupon code is not valid.');\n        }\n        // Validate expiration date\n        if (!validatorjs.isAfter(resData[0].expiration_at)) {\n            throw new Error('Coupon code is not valid.');\n        }\n        yield put(applyCoupon(resData[0]));\n    } catch (error) {\n        yield put(handleCatchedError(applyCouponFailed)(error));\n    }\n}\n\nexport function* newReservationSaga(payload: any): any {\n    logger.debug('[saga]', 'newReservationSaga', payload);\n\n    const reservationId = getStoredValue<string>('reservationId');\n\n    try {\n        let resData: TypeNewReservation;\n        if (!reservationId) {\n            resData = yield api.newReservation(payload.data);\n        } else {\n            resData = yield api.updateReservation(payload.data, reservationId);\n        }\n        yield put(setNewReservation(resData));\n    } catch (error) {\n        yield put(handleCatchedError(newReservationFailed)(error));\n    }\n}\n\nexport function* deleteReservationSaga(payload: any): any {\n    logger.debug('[saga]', 'newReservationSaga', payload);\n\n    try {\n        const resData: TypeNewReservation = yield api.deleteReservation(payload.reservationId);\n        yield put(finishDeleteReservation(resData));\n    } catch (error) {\n        yield put(handleCatchedError(deleteReservationFailed)(error));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}